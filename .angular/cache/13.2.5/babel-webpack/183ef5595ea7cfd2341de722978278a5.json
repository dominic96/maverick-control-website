{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { catchError, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.baseUrl = `${environment.apiUrl}`; //options header\n\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      /**\r\n       * fetch a currently logged in user when service is intiated\r\n       */\n\n      this.userSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('user') || '{}'));\n      this.user = this.userSubject.asObservable();\n    }\n    /**\r\n     * Returns the current value of User\r\n     * The value is null if no user is currently logged in OR\r\n     * a Valid User object is User is logged in\r\n     */\n\n\n    get userValue() {\n      return this.userSubject.value;\n    }\n    /**\r\n     * this method checks whether or not there is an already existing account\r\n     * logged in\r\n     *\r\n     * if No User is found boolean false is returned otherwise the Object of\r\n     *  currently logged in User is returned used for further processing\r\n     */\n\n\n    checkLogin() {\n      //this method doesnt work properly in the case that an error encountered \n      // the catch phrase is failing to catch the error \n      if (Object.keys(this.userValue).length == 0) {\n        console.log(\"No User Currently Logged In\");\n        this.loginPage();\n      } else {\n        console.log(\"attempting to reload user account\");\n\n        try {\n          console.log(\"trying\");\n          this.router.navigate(['user'], {\n            queryParams: {\n              email: this.userValue.email\n            }\n          });\n          console.log(\"tried\");\n        } catch (error) {\n          console.log(\"caught error\");\n          this.loginPage();\n        }\n      }\n    }\n    /**\r\n     * simply navigates to a login page\r\n     */\n\n\n    loginPage() {\n      this.router.navigate(['authenticate/login']);\n    }\n    /**\r\n     * this function is called when a User wants to sign with\r\n     * the Credentials object containing an email and password.\r\n     * @returns User\r\n     * @requires Credentials\r\n     */\n\n\n    login(credentials) {\n      const url = `${this.baseUrl}/login/login`;\n      return this.http.post(url, credentials, {\n        observe: 'response'\n      }).pipe(tap(resp => {\n        //console.log(`Successfuly Logged in User with Email: ${user.email}`)\n        const keys = resp.headers.keys();\n        console.log(\"recovered headers\" + keys.length);\n        keys.forEach(key => console.log(\"header key \" + key + \" \")); //get user from body and set user into the local storage and userSubject\n\n        let _user = Object.assign({}, resp.body);\n\n        this.userSubject.next(_user);\n        localStorage.setItem('user', JSON.stringify(_user));\n      }), catchError(this.handleError));\n    }\n    /**\r\n     * loadUserAccount\r\n     * Loads the user account information after a successful log in\r\n     */\n\n\n    loadUserAccount(email) {\n      console.log(\"Loading Account information\");\n      const url = `${this.baseUrl}/station/manager/load/account/${email}`;\n      return this.http.get(url, this.httpOptions).pipe(tap(user => {\n        console.log(`successfuly Loaded account information Email: ${user.email}`);\n      }), catchError(this.handleError));\n    }\n\n    logout() {\n      localStorage.removeItem('user');\n      this.userSubject.next({\n        userId: 0,\n        firstname: '',\n        lastname: '',\n        email: '',\n        type: '',\n        token: ''\n      });\n      this.loginPage(); //implemment this to send a logout request to the server \n    }\n\n    handleError(error) {\n      //this functions throws an error that i'm fqiling to catch \n      // this is a bug\n      if (error.status === 0) {\n        //client side or network error \n        console.error(\"An error occured: \", error.error);\n      } else {\n        //backend responded with an unsuccessful error code\n        console.error(`Server returned error code: ${error.status}, and Body: `, error.error);\n\n        if (error.status === 401) {//this.router.navigate(['authenticate/login']);\n          // console.error(\"User unauthorized redirecting to login page\");\n          //this.router.navigate(['authenticate/login']);\n        }\n      } //Return an Observable with a User friendly error message\n\n\n      return throwError(() => new Error(\"Something went wrong, Please try again in a few minutes\"));\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}