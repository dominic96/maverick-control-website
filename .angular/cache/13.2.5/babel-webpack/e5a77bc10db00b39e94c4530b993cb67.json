{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../authentication/authentication.service\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http, authenticationService) {\n      this.http = http;\n      this.authenticationService = authenticationService;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      this.baseUrl = `${environment.apiUrl}/itravel/rest/user/account`;\n    }\n    /**\r\n     *\r\n     * @param userId UserId for the user that has just logged in\r\n     * @returns An observable containing account information for\r\n     * that Userk\r\n     */\n\n\n    loadUserAccount(userId) {\n      const url = `${this.baseUrl}/get/user/${userId}`;\n      return this.http.get(url, this.httpOptions).pipe(tap(user => {\n        console.log(` retrieved account for user with email: ${user.email}`);\n      }));\n    }\n    /**\r\n     * Logs out the user and clears the account from the memory\r\n     * and should also unsubscribe all the observables that\r\n     * are still being subscribed to\r\n     */\n\n\n    logout(userId) {\n      const url = `${this.baseUrl}/logout/${userId}`;\n      return this.http.get(url, this.httpOptions).pipe(tap(_ => {\n        console.log(`logging out user with Id: ${userId}`);\n        this.authenticationService.logout();\n      }));\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthenticationService));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}