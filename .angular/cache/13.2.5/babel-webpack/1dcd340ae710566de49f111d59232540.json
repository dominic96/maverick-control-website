{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../authentication/authentication.service\";\nexport let JwtInterceptor = /*#__PURE__*/(() => {\n  class JwtInterceptor {\n    constructor(authenticationService) {\n      this.authenticationService = authenticationService;\n    }\n\n    intercept(request, next) {\n      /**\r\n       * intercept a request and add an JWT token is User is logged in\r\n       * and if the request is gping to the URL indicated\r\n       */\n      console.log(\"Intercepted Request\");\n      const user = this.authenticationService.userValue;\n      const isLoggedIn = user && user.token;\n      const isApiUrl = request.url.startsWith(environment.apiUrl);\n      console.log(`isLoggedIn: ${isLoggedIn} AND isApiUrl: ${isApiUrl}`);\n      let ok;\n\n      if (isLoggedIn && isApiUrl) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: `${user.token}`\n          }\n        });\n        console.log(\"Added Authorization Header\");\n      }\n\n      return next.handle(request).pipe(tap({\n        next: event => this.getHeaders(event)\n      }));\n    }\n\n    getHeaders(event) {\n      if (event instanceof HttpResponse) {\n        const keys = event.headers.keys();\n        console.log(`recovered Header keys: ${keys.length}`);\n      }\n    }\n\n  }\n\n  JwtInterceptor.ɵfac = function JwtInterceptor_Factory(t) {\n    return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AuthenticationService));\n  };\n\n  JwtInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JwtInterceptor,\n    factory: JwtInterceptor.ɵfac\n  });\n  return JwtInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}